apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql
  namespace: dba
  labels:
    app: mysql
data:
  master.cnf: |
    # Apply this config only on the master.
    [mysqld]
    log-bin
  slave.cnf: |
    # Apply this config only on slaves.
    [mysqld]
    read_only
---
# Headless service for stable DNS entries of StatefulSet members.
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: dba
  labels:
    app: mysql
spec:
  ports:
  - name: mysql
    port: 3306
  clusterIP: None
  selector:
    app: mysql
---
# Client service for connecting to any MySQL instance for reads.
# For writes, you must instead connect to the master: mysql-0.mysql.
apiVersion: v1
kind: Service
metadata:
  name: mysql-read
  namespace: dba
  labels:
    app: mysql
spec:
  ports:
  - name: mysql
    port: 3306
  selector:
    app: mysql
  type: LoadBalancer
---
# Client service for connecting to any MySQL instance for writes.
apiVersion: v1
kind: Service
metadata:
  name: mysql-write
  namespace: dba
  labels:
    app: mysql
spec:
  ports:
  - name: mysql
    port: 3306
  selector:
    app: mysql
  type: LoadBalancer
---
# StatefulSet mysql cluster
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: mysql
  namespace: dba
spec:
  selector:
    matchLabels:
      app: mysql
  serviceName: mysql
  replicas: 3
  template:
    metadata:
      labels:
        app: mysql
    spec:
      initContainers:
      - name: init-mysql
        image: registry.dev.hbec.com/dba/mysql:5.6
        command:
        - bash
        - "-c"
        - |
          set -ex
          # Generate mysql server-id from pod ordinal index.
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          echo [mysqld] > /mnt/conf.d/server-id.cnf
          # Add an offset to avoid reserved server-id=0 value.
          echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
          # Copy appropriate conf.d files from config-map to emptyDir.
          if [[ $ordinal -eq 0 ]]; then
            cp /mnt/config-map/master.cnf /mnt/conf.d/
          else
            cp /mnt/config-map/slave.cnf /mnt/conf.d/
          fi
        volumeMounts:
        - name: conf
          mountPath: /mnt/conf.d
        - name: config-map
          mountPath: /mnt/config-map
      - name: clone-mysql
        image: registry.dev.hbec.com/dba/xtrabackup:1.0
        command:
        - bash
        - "-c"
        - |
          set -ex
          # Skip the clone if data already exists.
          [[ -d /var/lib/mysql/mysql ]] && exit 0
          # Skip the clone on master (ordinal index 0).
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          [[ $ordinal -eq 0 ]] && exit 0
          # Clone data from previous peer.
          ncat --recv-only mysql-$(($ordinal-1)).mysql 3307 | xbstream -x -C /var/lib/mysql
          # Prepare the backup.
          xtrabackup --prepare --target-dir=/var/lib/mysql
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
      containers:
      - name: mysql
        image: registry.dev.hbec.com/dba/mysql:5.6
        env:
        - name: MYSQL_ALLOW_EMPTY_PASSWORD
          value: "1"
        - name: MYSQL_ROOT_HOST
          value: "localhost"
        ports:
        - name: mysql
          containerPort: 3306
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        resources:
          requests:
            cpu: 500m
            memory: 200Mi
        livenessProbe:
          exec:
            command: ["mysqladmin", "ping"]
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            # Check we can execute queries over TCP (skip-networking is off).
            command: ["mysql", "-h", "127.0.0.1", "-e", "SELECT 1"]
          initialDelaySeconds: 5
          periodSeconds: 2
          timeoutSeconds: 1
      - name: xtrabackup
        image: registry.dev.hbec.com/dba/xtrabackup:1.0
        env:
        - name: MYSQL_REPL_PASSWORD
          value: "123123"
        ports:
        - name: xtrabackup
          containerPort: 3307
        command:
        - bash
        - "-c"
        - |
          set -ex
          cd /var/lib/mysql
          # Determine binlog position of cloned data, if any.
          if [[ -f xtrabackup_slave_info && -n $(cat xtrabackup_slave_info) ]]; then
            # XtraBackup already generated a partial "CHANGE MASTER TO" query
            # because we're cloning from an existing slave.
            mv xtrabackup_slave_info change_master_to.sql.in
            # Ignore xtrabackup_binlog_info in this case (it's useless).
            rm -f xtrabackup_binlog_info
          elif [[ -f xtrabackup_binlog_info ]]; then
            # We're cloning directly from master. Parse binlog position.
            [[ `cat xtrabackup_binlog_info` =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1
            rm xtrabackup_binlog_info
            echo "CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\
                  MASTER_LOG_POS=${BASH_REMATCH[2]}" > change_master_to.sql.in
          fi
          echo "Waiting for mysqld to be ready (accepting connections)"
          until mysql -h 127.0.0.1 -e "SELECT 1"; do sleep 1; done
          replexists=$(mysql -h 127.0.0.1 -ABse "select user from mysql.user where user = 'repl' and host = '%'")
          if [[ -z "$replexists" ]]; then
            mysql -h 127.0.0.1 <<EOF
              CREATE USER 'repl'@'%' IDENTIFIED BY '${MYSQL_REPL_PASSWORD}';
              GRANT REPLICATION SLAVE ON *.* TO 'repl'@'%';
              FLUSH PRIVILEGES;
          EOF
          fi
          # Check if we need to complete a clone by starting replication.
          if [[ -f change_master_to.sql.in ]]; then
            echo "Initializing replication from clone position"
            # In case of container restart, attempt this at-most-once.
            mv change_master_to.sql.in change_master_to.sql.orig
            mysql -h 127.0.0.1 <<EOF
              $(sed 's/;$//g'<change_master_to.sql.orig),
              MASTER_HOST='mysql-0.mysql',
              MASTER_USER='repl',
              MASTER_PASSWORD='${MYSQL_REPL_PASSWORD}',
              MASTER_CONNECT_RETRY=10;
              START SLAVE;
          EOF
          fi

          # Update Endpoints for write.
          endpoint=$(curl -s https://$KUBERNETES_SERVICE_HOST/api/v1/namespaces/dba/pods/$(hostname|sed -r 's/-[0-9]+$/-0/g') --header "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt|grep "podIP"|sed 's/[, "]//g'|awk -F':' '{print $2}'|grep [0-9]|tr -d ' ')
          echo "this is master, update write endpoint to $endpoint."
          while true;
          do
            ready=$(curl -s https://$KUBERNETES_SERVICE_HOST/api/v1/namespaces/dba/pods/$(hostname) --header "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt|grep 'ready":'|sed 's/,//'|awk -F: '{print $2}')
            done="true"
            echo "ready:$ready"
            for i in $ready;
            do
              if [[ "$i" != "true" ]]; then
                done="false"
                break
              fi
            done
            echo "my ready status is: $done"
            if [[ "$done" = "true" ]]; then
              break
            fi
            sleep 1
          done
          echo "replace endpoint to $endpoint."
          curl -s https://$KUBERNETES_SERVICE_HOST/api/v1/namespaces/dba/endpoints/mysql-write -XPUT --header "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
            -H "Content-Type:application/json" \
            -d "{
                  \"kind\": \"Endpoints\",
                  \"apiVersion\": \"v1\",
                  \"metadata\": {
                    \"name\": \"mysql-write\",
                    \"namespace\": \"dba\",
                    \"labels\": {
                      \"app\": \"mysql\"
                    }
                  },
                  \"subsets\": [
                    {
                      \"addresses\": [
                        {
                          \"ip\": \"$endpoint\"
                        }
                      ],
                      \"ports\": [
                        {
                          \"name\": \"mysql\",
                          \"port\": 3306,
                          \"protocol\": \"TCP\"
                        }
                      ]
                    }
                  ]
                }"

          # Start a server to send backups when requested by peers.
          exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \
            "innobackupex --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root /tmp"
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
      volumes:
      - name: conf
        emptyDir: {}
      - name: config-map
        configMap:
          name: mysql
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "dba"
      resources:
        requests:
          storage: 2Gi